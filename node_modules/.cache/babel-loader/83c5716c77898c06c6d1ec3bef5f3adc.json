{"ast":null,"code":"function e(e) {\n  return e && \"object\" == typeof e && \"default\" in e ? e.default : e;\n}\n\nvar t = e(require(\"short-uuid\")),\n    r = e(require(\"crypto-js\")),\n    i = new Date(+new Date() + 864e5).toISOString(),\n    n = i.split(\"-\").join(\"\").split(\":\").join(\"\").split(\".\").join(\"\"),\n    o = i.split(\"T\")[0].split(\"-\").join(\"\"),\n    a = function a() {};\n\na.getPolicy = function (e) {\n  return new Buffer(JSON.stringify({\n    expiration: i,\n    conditions: [{\n      acl: \"public-read\"\n    }, {\n      bucket: e.bucketName\n    }, [\"starts-with\", \"$key\", e.dirName ? e.dirName + \"/\" : \"\"], [\"starts-with\", \"$Content-Type\", \"\"], [\"starts-with\", \"$x-amz-meta-tag\", \"\"], {\n      \"x-amz-algorithm\": \"AWS4-HMAC-SHA256\"\n    }, {\n      \"x-amz-credential\": e.accessKeyId + \"/\" + o + \"/\" + e.region + \"/s3/aws4_request\"\n    }, {\n      \"x-amz-date\": n\n    }, {\n      \"x-amz-meta-uuid\": \"14365123651274\"\n    }, {\n      \"x-amz-server-side-encryption\": \"AES256\"\n    }]\n  })).toString(\"base64\").replace(/\\n|\\r/, \"\");\n};\n\nvar c = function c() {};\n\nc.getSignature = function (e, t, i) {\n  var n, o, a, c, s, u;\n  return r.HmacSHA256(i, (n = e.secretAccessKey, o = t, a = e.region, c = r.HmacSHA256(o, \"AWS4\" + n), s = r.HmacSHA256(a, c), u = r.HmacSHA256(\"s3\", s), r.HmacSHA256(\"aws4_request\", u))).toString(r.enc.Hex);\n};\n\nvar s = function s(e) {\n  this.config = e;\n};\n\ns.prototype.uploadFile = function (e, t) {\n  try {\n    var r = this;\n    !function (e, t) {\n      if (null === e.bucketName || \"\" === e.bucketName) throw new Error(\"Your bucketName cannot be empty \");\n      if (null === e.region || \"\" === e.region) throw new Error(\"Must provide a valide region in order to use your bucket\");\n      if (null === e.accessKeyId || \"\" === e.accessKeyId) throw new Error(\"Must provide accessKeyId\");\n      if (null === e.secretAccessKey || \"\" === e.secretAccessKey) throw new Error(\"Must provide secretAccessKey\");\n      if (!t) throw new Error(\"File cannot be empty\");\n    }(r.config, e);\n    var i = new FormData(),\n        s = r.getFileNameWithExtension(e, t),\n        u = (r.config.dirName ? r.config.dirName + \"/\" : \"\") + s,\n        m = (p = r.config).s3Url && \"\" !== p.s3Url ? p.s3Url : function (e) {\n      var t = e.bucketName,\n          r = e.region,\n          i = r.split(\"-\")[0];\n\n      switch (i) {\n        case \"cn\":\n          return \"https://\" + t + \".s3.\" + r + \".amazonaws.com.\" + i;\n\n        default:\n          return \"https://\" + t + \".s3-\" + r + \".amazonaws.com\";\n      }\n    }(p);\n    return i.append(\"key\", u), i.append(\"acl\", \"public-read\"), i.append(\"Content-Type\", e.type), i.append(\"x-amz-meta-uuid\", \"14365123651274\"), i.append(\"x-amz-server-side-encryption\", \"AES256\"), i.append(\"X-Amz-Credential\", r.config.accessKeyId + \"/\" + o + \"/\" + r.config.region + \"/s3/aws4_request\"), i.append(\"X-Amz-Algorithm\", \"AWS4-HMAC-SHA256\"), i.append(\"X-Amz-Date\", n), i.append(\"x-amz-meta-tag\", \"\"), i.append(\"Policy\", a.getPolicy(r.config)), i.append(\"X-Amz-Signature\", c.getSignature(r.config, o, a.getPolicy(r.config))), i.append(\"file\", e), Promise.resolve(fetch(m, {\n      method: \"post\",\n      body: i\n    })).then(function (e) {\n      return e.ok ? Promise.resolve({\n        bucket: r.config.bucketName,\n        key: (r.config.dirName ? r.config.dirName + \"/\" : \"\") + s,\n        location: m + \"/\" + (r.config.dirName ? r.config.dirName + \"/\" : \"\") + s,\n        status: e.status\n      }) : Promise.reject(e);\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n\n  var p;\n}, s.prototype.deleteFile = function (e) {\n  try {\n    return Promise.resolve(fetch(\"https://\" + this.config.bucketName + \".s3\" + (this.config.region ? \"-\" + this.config.region : \"\") + \".amazonaws.com/\" + (this.config.dirName ? this.config.dirName + \"/\" : \"\") + e, {\n      method: \"delete\"\n    })).then(function (t) {\n      return t.ok ? Promise.resolve({\n        ok: t.ok,\n        status: t.status,\n        message: \"File Deleted\",\n        fileName: e\n      }) : Promise.reject(t);\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}, s.prototype.getFileNameWithExtension = function (e, r) {\n  return r && r.includes(\".\") ? r : (r || t.generate()) + \".\" + e.type.split(\"/\")[1];\n}, module.exports = s;","map":null,"metadata":{},"sourceType":"script"}