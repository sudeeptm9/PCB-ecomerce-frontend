{"ast":null,"code":"var hasOwnProperty = Object.prototype.hasOwnProperty;\nvar objectPrototype = Object.prototype;\nvar plainObjectSymbol = Symbol.for('isEqualObject:plainObject');\n\nfunction isPlainObject(obj) {\n  var constructor = obj.constructor;\n  var prototype = Object.getPrototypeOf(obj);\n  return obj[plainObjectSymbol] || (!constructor || constructor === Object) && (!prototype || prototype === objectPrototype);\n}\n\nvar isArray = Array.isArray;\n\nfunction isEqualObjects(obj, targetObj) {\n  var _ref = this || {},\n      comparator = _ref.comparator,\n      compareSymbols = _ref.compareSymbols;\n\n  var isEqual = function isEqual(value, targetValue, stack) {\n    if (value === targetValue) {\n      return true;\n    }\n\n    if (value !== value && targetValue !== targetValue) {\n      return true;\n    }\n\n    var result;\n\n    if (typeof value === \"object\" && typeof targetValue === \"object\" && value && targetValue) {\n      if (isArray(value)) {\n        if (isArray(targetValue)) {\n          var _length = value.length;\n\n          if (_length !== targetValue.length) {\n            return false;\n          }\n\n          for (var i = 0; i < _length; i++) {\n            if (!isEqual(value[i], targetValue[i], stack.concat([value]))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      } else if (value instanceof Date) {\n        return targetValue instanceof Date && +value === +targetValue;\n      } else if (value instanceof RegExp) {\n        return targetValue instanceof RegExp && value.toString() === targetValue.toString();\n      } else if (comparator && (result = comparator(value, targetValue)) !== undefined) {\n        return result;\n      } else if (isPlainObject(value) && isPlainObject(targetValue) && stack.indexOf(value) === -1) {\n        var keys = compareSymbols ? getAllProps(value) : Object.keys(value);\n        var targetKeys = compareSymbols ? getAllProps(targetValue) : Object.keys(targetValue);\n        var _length2 = keys.length;\n\n        if (_length2 !== targetKeys.length) {\n          return false;\n        }\n\n        for (var _i = 0; _i < _length2; _i++) {\n          var key = keys[_i];\n\n          if (!hasOwnProperty.call(targetValue, key)) {\n            return false;\n          }\n\n          var propValue = value[key];\n          var targetPropValue = targetValue[key];\n\n          if (!isEqual(propValue, targetPropValue, stack.concat([value]))) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var length = arguments.length;\n\n  for (var i = 1; i < length; i++) {\n    if (!isEqual(obj, arguments[i], [])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nObject.defineProperties(isEqualObjects, {\n  plainObject: {\n    value: plainObjectSymbol\n  }\n});\nvar cloneMap = new Map([[RegExp, function (target) {\n  return new RegExp(target.source, target.flags);\n}], [Date, function (target) {\n  return new Date(+target);\n}]]);\n\nvar getAllProps = function getAllProps(obj) {\n  return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj));\n};\n\nfunction cloneObject(obj) {\n  var cloneTarget = function cloneTarget(target, stack) {\n    if (typeof target !== 'object') {\n      return target;\n    }\n\n    if (target === null) return null;\n\n    if (isArray(target)) {\n      var len = target.length;\n      var cloned = new Array(len);\n      var targetStack = len && (stack ? stack.concat(target) : [target]);\n\n      for (var i = 0; i < len; i++) {\n        cloned[i] = cloneTarget(target[i], targetStack);\n      }\n\n      return cloned;\n    }\n\n    var constructor = target.constructor;\n    var cloner = constructor && cloneMap.get(constructor);\n\n    if (cloner) {\n      return cloner(target, stack);\n    }\n\n    if (isPlainObject(target) && (!stack || stack.indexOf(target) === -1)) {\n      var proto = Object.getPrototypeOf(target);\n\n      var _cloned = proto === objectPrototype ? {} : Object.create(objectPrototype);\n\n      var props = getAllProps(target);\n      var _len = props.length;\n      var prop;\n\n      var _targetStack = _len && (stack ? stack.concat(target) : [target]);\n\n      for (var _i2 = 0; _i2 < _len; _i2++) {\n        prop = props[_i2];\n        _cloned[prop] = cloneTarget(target[prop], _targetStack);\n      }\n\n      return _cloned;\n    }\n\n    return target;\n  };\n\n  return cloneTarget(obj, null);\n}\n\nmodule.exports = {\n  isEqualObjects: isEqualObjects,\n  cloneObject: cloneObject\n};","map":null,"metadata":{},"sourceType":"script"}