const{hasOwnProperty:hasOwnProperty}=Object.prototype,objectPrototype=Object.prototype,plainObjectSymbol=Symbol.for("isEqualObject:plainObject");function isPlainObject(t){const{constructor:e}=t,r=Object.getPrototypeOf(t);return t[plainObjectSymbol]||(!e||e===Object)&&(!r||r===objectPrototype)}const{isArray:isArray}=Array;function isEqualObjects(t,e){const{comparator:r,compareSymbols:n}=this||{},o=(t,e,c)=>{if(t===e)return!0;if(t!=t&&e!=e)return!0;let l;if("object"==typeof t&&"object"==typeof e&&t&&e)if(isArray(t)){if(isArray(e)){const{length:r}=t;if(r!==e.length)return!1;for(let n=0;n<r;n++)if(!o(t[n],e[n],c.concat([t])))return!1;return!0}}else{if(t instanceof Date)return e instanceof Date&&+t==+e;if(t instanceof RegExp)return e instanceof RegExp&&t.toString()===e.toString();if(r&&void 0!==(l=r(t,e)))return l;if(isPlainObject(t)&&isPlainObject(e)&&-1===c.indexOf(t)){const r=n?getAllProps(t):Object.keys(t),l=n?getAllProps(e):Object.keys(e),{length:i}=r;if(i!==l.length)return!1;for(let n=0;n<i;n++){const l=r[n];if(!hasOwnProperty.call(e,l))return!1;const i=t[l],s=e[l];if(!o(i,s,c.concat([t])))return!1}return!0}}return!1},{length:c}=arguments;for(let e=1;e<c;e++)if(!o(t,arguments[e],[]))return!1;return!0}Object.defineProperties(isEqualObjects,{plainObject:{value:plainObjectSymbol}});const cloneMap=new Map([[RegExp,t=>new RegExp(t.source,t.flags)],[Date,t=>new Date(+t)]]),getAllProps=t=>Object.keys(t).concat(Object.getOwnPropertySymbols(t));function cloneObject(t){const e=(t,r)=>{if("object"!=typeof t)return t;if(null===t)return null;if(isArray(t)){const n=t.length,o=new Array(n);let c=n&&(r?r.concat(t):[t]);for(let r=0;r<n;r++)o[r]=e(t[r],c);return o}const{constructor:n}=t,o=n&&cloneMap.get(n);if(o)return o(t,r);if(isPlainObject(t)&&(!r||-1===r.indexOf(t))){const n=Object.getPrototypeOf(t)===objectPrototype?{}:Object.create(objectPrototype),o=getAllProps(t);let c,l=o.length,i=l&&(r?r.concat(t):[t]);for(let r=0;r<l;r++)n[c=o[r]]=e(t[c],i);return n}return t};return e(t,null)}module.exports={isEqualObjects:isEqualObjects,cloneObject:cloneObject};