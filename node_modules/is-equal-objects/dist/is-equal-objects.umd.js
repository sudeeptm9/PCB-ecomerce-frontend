(function (factory) {
  typeof define === 'function' && define.amd ? define('isEqualObjects', factory) :
  factory();
}((function () { 'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var objectPrototype = Object.prototype;
  var plainObjectSymbol = Symbol.for('isEqualObject:plainObject');

  function isPlainObject(obj) {
    var constructor = obj.constructor;
    var prototype = Object.getPrototypeOf(obj);
    return obj[plainObjectSymbol] || (!constructor || constructor === Object) && (!prototype || prototype === objectPrototype);
  }

  var isArray = Array.isArray;

  function isEqualObjects(obj, targetObj) {
    var _ref = this || {},
        comparator = _ref.comparator,
        compareSymbols = _ref.compareSymbols;

    var isEqual = function (value, targetValue, stack) {
      if (value === targetValue) {
        return true;
      }

      if (value !== value && targetValue !== targetValue) {
        return true;
      }

      var result;

      if (typeof value === "object" && typeof targetValue === "object" && value && targetValue) {
        if (isArray(value)) {
          if (isArray(targetValue)) {
            var _length = value.length;

            if (_length !== targetValue.length) {
              return false;
            }

            for (var i = 0; i < _length; i++) {
              if (!isEqual(value[i], targetValue[i], stack.concat([value]))) {
                return false;
              }
            }

            return true;
          }
        } else if (value instanceof Date) {
          return targetValue instanceof Date && +value === +targetValue;
        } else if (value instanceof RegExp) {
          return targetValue instanceof RegExp && value.toString() === targetValue.toString();
        } else if (comparator && (result = comparator(value, targetValue)) !== undefined) {
          return result;
        } else if (isPlainObject(value) && isPlainObject(targetValue) && stack.indexOf(value) === -1) {
          var keys = compareSymbols ? getAllProps(value) : Object.keys(value);
          var targetKeys = compareSymbols ? getAllProps(targetValue) : Object.keys(targetValue);
          var _length2 = keys.length;

          if (_length2 !== targetKeys.length) {
            return false;
          }

          for (var _i = 0; _i < _length2; _i++) {
            var key = keys[_i];

            if (!hasOwnProperty.call(targetValue, key)) {
              return false;
            }

            var propValue = value[key];
            var targetPropValue = targetValue[key];

            if (!isEqual(propValue, targetPropValue, stack.concat([value]))) {
              return false;
            }
          }

          return true;
        }
      }

      return false;
    };

    var length = arguments.length;

    for (var i = 1; i < length; i++) {
      if (!isEqual(obj, arguments[i], [])) {
        return false;
      }
    }

    return true;
  }

  Object.defineProperties(isEqualObjects, {
    plainObject: {
      value: plainObjectSymbol
    }
  });
  var cloneMap = new Map([[RegExp, function (target) {
    return new RegExp(target.source, target.flags);
  }], [Date, function (target) {
    return new Date(+target);
  }]]);

  var getAllProps = function (obj) {
    return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj));
  };

  function cloneObject(obj) {
    var cloneTarget = function (target, stack) {
      if (typeof target !== 'object') {
        return target;
      }

      if (target === null) return null;

      if (isArray(target)) {
        var len = target.length;
        var cloned = new Array(len);
        var targetStack = len && (stack ? stack.concat(target) : [target]);

        for (var i = 0; i < len; i++) {
          cloned[i] = cloneTarget(target[i], targetStack);
        }

        return cloned;
      }

      var constructor = target.constructor;
      var cloner = constructor && cloneMap.get(constructor);

      if (cloner) {
        return cloner(target, stack);
      }

      if (isPlainObject(target) && (!stack || stack.indexOf(target) === -1)) {
        var proto = Object.getPrototypeOf(target);

        var _cloned = proto === objectPrototype ? {} : Object.create(objectPrototype);

        var props = getAllProps(target);
        var _len = props.length;
        var prop;

        var _targetStack = _len && (stack ? stack.concat(target) : [target]);

        for (var _i2 = 0; _i2 < _len; _i2++) {
          prop = props[_i2];
          _cloned[prop] = cloneTarget(target[prop], _targetStack);
        }

        return _cloned;
      }

      return target;
    };

    return cloneTarget(obj, null);
  }

  module.exports = {
    isEqualObjects: isEqualObjects,
    cloneObject: cloneObject
  };

})));
